
Generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000190  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001bf  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000905  00000000  00000000  000001f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fc  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  00001567  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000010e  0000010e  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_19 00000014  000000fa  000000fa  0000016e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000078  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  00000116  00000116  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  00000118  00000118  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  0000011a  0000011a  0000018e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  00000112  00000112  00000186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_19>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 72 00 	jmp	0xe4	; 0xe4 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_19:

000000fa <__vector_19>:
#include <avr/interrupt.h>																//DEFINE INTERRUPT 
#include <util/delay.h>

																	

ISR(TIMER0_COMP_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
	
	
}
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

Disassembly of section .text.main:

0000006c <main>:
	const uint8_t OCR_100KHZ =  4;
	
	
	
	//CONFIGURAMOS ENTRADAS Y SALIDAS	
	DDRB |= (1 <<PB3);																	//PB3 OUTPUT
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB3);																//PB3 CLEAN
  72:	88 b3       	in	r24, 0x18	; 24
  74:	87 7f       	andi	r24, 0xF7	; 247
  76:	88 bb       	out	0x18, r24	; 24
	
	
	DDRA &= ~(1 << DDA0);																//PA0 AS INPUT
  78:	8a b3       	in	r24, 0x1a	; 26
  7a:	8e 7f       	andi	r24, 0xFE	; 254
  7c:	8a bb       	out	0x1a, r24	; 26
	DDRA &= ~(1 << DDA1);																//PA1 AS INPUT
  7e:	8a b3       	in	r24, 0x1a	; 26
  80:	8d 7f       	andi	r24, 0xFD	; 253
  82:	8a bb       	out	0x1a, r24	; 26
	
	
	TCNT0 = 0;																			//CLEAN REGISTER TCNT0
  84:	12 be       	out	0x32, r1	; 50
	OCR0 = 61;																			//INITIAL VALUE OCR0
  86:	8d e3       	ldi	r24, 0x3D	; 61
  88:	8c bf       	out	0x3c, r24	; 60
																				
	TCCR0 = (1 << WGM01)|(0 << WGM00)|(0 << COM01)|(1 << COM00)|						//CTC MODE AND TOGGLE
  8a:	8a e1       	ldi	r24, 0x1A	; 26
  8c:	83 bf       	out	0x33, r24	; 51
	
		
	while(1)
    {
		
		uint8_t pin = PINA;																//LEER UNA VEZ
  8e:	99 b3       	in	r25, 0x19	; 25
		uint8_t b0 = (pin >> PA0) & 1;
  90:	49 2f       	mov	r20, r25
  92:	41 70       	andi	r20, 0x01	; 1
		uint8_t b1 = (pin >> PA1) & 1;
		
		uint8_t selec = b0 | (b1<<1);
  94:	91 fb       	bst	r25, 1
  96:	22 27       	eor	r18, r18
  98:	20 f9       	bld	r18, 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	c9 01       	movw	r24, r18
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	84 2b       	or	r24, r20
		
		
		switch(selec){
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	49 f0       	breq	.+18     	; 0xba <main+0x4e>
  a8:	83 30       	cpi	r24, 0x03	; 3
  aa:	61 f0       	breq	.+24     	; 0xc4 <main+0x58>
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <main+0x62>
				
				
			case 1:
				TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (1 << CS01) | (0 << CS00);						//PRESCALER IN 8
  b0:	8a e1       	ldi	r24, 0x1A	; 26
  b2:	83 bf       	out	0x33, r24	; 51
				OCR0 = OCR_1KHZ;																					//CONFIGURA EL 0CR0
  b4:	8d e3       	ldi	r24, 0x3D	; 61
  b6:	8c bf       	out	0x3c, r24	; 60
				break;																								//1KHZ
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <main+0x6a>
			
			
			case 2:
				
				TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (0 << CS01) | (1 << CS00);						//PRESCALER 1				
  ba:	89 e1       	ldi	r24, 0x19	; 25
  bc:	83 bf       	out	0x33, r24	; 51
				OCR0 =OCR_10KHZ;
  be:	81 e3       	ldi	r24, 0x31	; 49
  c0:	8c bf       	out	0x3c, r24	; 60
				break;	
  c2:	09 c0       	rjmp	.+18     	; 0xd6 <main+0x6a>
						
			
			case 3:
				
				TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (0 << CS01) | (1 << CS00);						//PRESCALER 1
  c4:	89 e1       	ldi	r24, 0x19	; 25
  c6:	83 bf       	out	0x33, r24	; 51
				OCR0 = OCR_100KHZ;
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	8c bf       	out	0x3c, r24	; 60
				break;	
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <main+0x6a>
			default:
				TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (1 << CS01) | (0 << CS00);						//PRESCALER 8
  ce:	8a e1       	ldi	r24, 0x1A	; 26
  d0:	83 bf       	out	0x33, r24	; 51
				OCR0 = OCR_1KHZ;
  d2:	8d e3       	ldi	r24, 0x3D	; 61
  d4:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	87 e8       	ldi	r24, 0x87	; 135
  d8:	93 e1       	ldi	r25, 0x13	; 19
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x6e>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x74>
  e0:	00 00       	nop
  e2:	d5 cf       	rjmp	.-86     	; 0x8e <main+0x22>

Disassembly of section .text.__dummy_fini:

00000116 <_fini>:
 116:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000118 <__funcs_on_exit>:
 118:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000011a <__simulator_exit>:
 11a:	08 95       	ret

Disassembly of section .text.exit:

000000e4 <exit>:
  e4:	ec 01       	movw	r28, r24
  e6:	0e 94 8c 00 	call	0x118	; 0x118 <__funcs_on_exit>
  ea:	0e 94 8b 00 	call	0x116	; 0x116 <_fini>
  ee:	ce 01       	movw	r24, r28
  f0:	0e 94 8d 00 	call	0x11a	; 0x11a <__simulator_exit>
  f4:	ce 01       	movw	r24, r28
  f6:	0e 94 89 00 	call	0x112	; 0x112 <_Exit>

Disassembly of section .text._Exit:

00000112 <_Exit>:
 112:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
