
Generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000192  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001c1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bd  00000000  00000000  000001f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ed  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028c  00000000  00000000  000010a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a5  00000000  00000000  0000151f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000110  00000110  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_19 00000014  000000fc  000000fc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000007a  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  00000118  00000118  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  0000011a  0000011a  0000018e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  0000011c  0000011c  00000190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000000e6  000000e6  0000015a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  00000114  00000114  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_19>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_19:

000000fc <__vector_19>:
#include <avr/interrupt.h>																//DEFINE INTERRUPT 
#include <util/delay.h>

																	

ISR(TIMER0_COMP_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
	
	
}
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

Disassembly of section .text.main:

0000006c <main>:
	
	uint8_t selec;
	uint8_t selec_anterior = 0xFF;
	
	//CONFIGURAMOS ENTRADAS Y SALIDAS	
	DDRB |= (1 <<PB3);																	//PB3 OUTPUT
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB3);																//PB3 CLEAN
  72:	88 b3       	in	r24, 0x18	; 24
  74:	87 7f       	andi	r24, 0xF7	; 247
  76:	88 bb       	out	0x18, r24	; 24
	
	
	DDRA &= ~(1 << DDA0);																//PA0 AS INPUT
  78:	8a b3       	in	r24, 0x1a	; 26
  7a:	8e 7f       	andi	r24, 0xFE	; 254
  7c:	8a bb       	out	0x1a, r24	; 26
	DDRA &= ~(1 << DDA1);																//PA1 AS INPUT
  7e:	8a b3       	in	r24, 0x1a	; 26
  80:	8d 7f       	andi	r24, 0xFD	; 253
  82:	8a bb       	out	0x1a, r24	; 26
	
	
	TCNT0 = 0;																			//CLEAN REGISTER TCNT0
  84:	12 be       	out	0x32, r1	; 50
	OCR0 = 61;																			//INITIAL VALUE OCR0
  86:	8d e3       	ldi	r24, 0x3D	; 61
  88:	8c bf       	out	0x3c, r24	; 60
																				
	TCCR0 = (1 << WGM01)|(0 << WGM00)|(0 << COM01)|(1 << COM00)|						//CTC MODE AND TOGGLE
  8a:	8b e1       	ldi	r24, 0x1B	; 27
  8c:	83 bf       	out	0x33, r24	; 51
	const uint8_t OCR_1KHZ	 = 61;
	const uint8_t OCR_10KHZ	 = 49;
	const uint8_t OCR_100KHZ =  4;
	
	uint8_t selec;
	uint8_t selec_anterior = 0xFF;
  8e:	9f ef       	ldi	r25, 0xFF	; 255
	while(1)
    {
		
		selec = 0;
						
		if(!(PINA & (1 << PINA1))){																					//SI PA1 ESTA LOW (CERRADO A GND)
  90:	c9 9b       	sbis	0x19, 1	; 25
  92:	02 c0       	rjmp	.+4      	; 0x98 <main+0x2c>
	
		
	while(1)
    {
		
		selec = 0;
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	01 c0       	rjmp	.+2      	; 0x9a <main+0x2e>
						
		if(!(PINA & (1 << PINA1))){																					//SI PA1 ESTA LOW (CERRADO A GND)
			selec +=2;
  98:	82 e0       	ldi	r24, 0x02	; 2
		}
		if (!(PINA & (1 << PINA0))){																				//SI PA0 ESTA LOW
  9a:	c8 9b       	sbis	0x19, 0	; 25
			selec += 1;
  9c:	8f 5f       	subi	r24, 0xFF	; 255
		}
		
		
		if(selec != selec_anterior)
  9e:	89 17       	cp	r24, r25
  a0:	d9 f0       	breq	.+54     	; 0xd8 <main+0x6c>
		{
					
			switch(selec){
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	49 f0       	breq	.+18     	; 0xb8 <main+0x4c>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	61 f0       	breq	.+24     	; 0xc2 <main+0x56>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	79 f4       	brne	.+30     	; 0xcc <main+0x60>
				
				
			case 1:
				TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (1 << CS01) | (1 << CS00);						//PRESCALER IN 64 
  ae:	9b e1       	ldi	r25, 0x1B	; 27
  b0:	93 bf       	out	0x33, r25	; 51
				OCR0 = OCR_1KHZ;																					//CONFIGURA EL 0CR0
  b2:	9d e3       	ldi	r25, 0x3D	; 61
  b4:	9c bf       	out	0x3c, r25	; 60
				break;																								//1KHZ
  b6:	0e c0       	rjmp	.+28     	; 0xd4 <main+0x68>
			
			
			case 2:
				
				TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (1 << CS01) | (0 << CS00);						//PRESCALER 8				
  b8:	9a e1       	ldi	r25, 0x1A	; 26
  ba:	93 bf       	out	0x33, r25	; 51
				OCR0 =OCR_10KHZ;
  bc:	91 e3       	ldi	r25, 0x31	; 49
  be:	9c bf       	out	0x3c, r25	; 60
				break;	
  c0:	09 c0       	rjmp	.+18     	; 0xd4 <main+0x68>
						
			
			case 3:
				
				TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (1 << CS01) | (0 << CS00);						//PRESCALER 8
  c2:	9a e1       	ldi	r25, 0x1A	; 26
  c4:	93 bf       	out	0x33, r25	; 51
				OCR0 = OCR_100KHZ;
  c6:	94 e0       	ldi	r25, 0x04	; 4
  c8:	9c bf       	out	0x3c, r25	; 60
				break;	
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <main+0x68>
			default:
				TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (1 << CS01) | (1 << CS00);						//PRESCALER 64
  cc:	9b e1       	ldi	r25, 0x1B	; 27
  ce:	93 bf       	out	0x33, r25	; 51
				OCR0 = OCR_1KHZ;
  d0:	9d e3       	ldi	r25, 0x3D	; 61
  d2:	9c bf       	out	0x3c, r25	; 60
				break;															
			}
			TCNT0 = 0;																								//REINICIAR EL CONTADOR AL CAMBIAR DE MODO, AYUDA A SINCRONIZAR
  d4:	12 be       	out	0x32, r1	; 50
			selec_anterior = selec;																					//GUARDA EL ESTADO ACTUAL PARA LA PROXIMA COMPARACIÓN
  d6:	98 2f       	mov	r25, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	ef e3       	ldi	r30, 0x3F	; 63
  da:	fc e9       	ldi	r31, 0x9C	; 156
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x70>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x76>
  e2:	00 00       	nop
  e4:	d5 cf       	rjmp	.-86     	; 0x90 <main+0x24>

Disassembly of section .text.__dummy_fini:

00000118 <_fini>:
 118:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000011a <__funcs_on_exit>:
 11a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000011c <__simulator_exit>:
 11c:	08 95       	ret

Disassembly of section .text.exit:

000000e6 <exit>:
  e6:	ec 01       	movw	r28, r24
  e8:	0e 94 8d 00 	call	0x11a	; 0x11a <__funcs_on_exit>
  ec:	0e 94 8c 00 	call	0x118	; 0x118 <_fini>
  f0:	ce 01       	movw	r24, r28
  f2:	0e 94 8e 00 	call	0x11c	; 0x11c <__simulator_exit>
  f6:	ce 01       	movw	r24, r28
  f8:	0e 94 8a 00 	call	0x114	; 0x114 <_Exit>

Disassembly of section .text._Exit:

00000114 <_Exit>:
 114:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
