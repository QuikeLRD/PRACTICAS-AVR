
Generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a0  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001cf  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ad  00000000  00000000  00000205  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002aa  00000000  00000000  00001087  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a5  00000000  00000000  00001523  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000011e  0000011e  00000192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_19 00000014  0000010a  0000010a  0000017e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000088  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  00000126  00000126  0000019a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  00000128  00000128  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  0000012a  0000012a  0000019e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  00000122  00000122  00000196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_19>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_19:

0000010a <__vector_19>:

// Variable global para el selector (opcional, podría ser local en main)
// volatile uint8_t selec; // Usar volatile si se modificara en una ISR

// ISR vacía si no se necesita hacer nada específico en la comparación
ISR(TIMER0_COMP_vect){
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
	// Podrías poner lógica aquí si necesitaras hacer algo en cada toggle,
	// pero para generar la señal cuadrada, el modo Toggle COM00=1 es suficiente.
}
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

Disassembly of section .text.main:

0000006c <main>:
{
	uint8_t selec; // Variable local para selección
	uint8_t selec_anterior = 0xFF; // Para detectar cambios, inicializar a un valor inválido

	//CONFIGURAMOS ENTRADAS Y SALIDAS
	DDRB |= (1 << PB3);     // PB3 (OC0) como SALIDA
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB3);   // PB3 inicia en BAJO
  72:	88 b3       	in	r24, 0x18	; 24
  74:	87 7f       	andi	r24, 0xF7	; 247
  76:	88 bb       	out	0x18, r24	; 24

	DDRA &= ~(1 << DDA0);   // PA0 como ENTRADA
  78:	8a b3       	in	r24, 0x1a	; 26
  7a:	8e 7f       	andi	r24, 0xFE	; 254
  7c:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA0);    // Habilitar Pull-up interno en PA0 (si el switch va a GND)
  7e:	8b b3       	in	r24, 0x1b	; 27
  80:	81 60       	ori	r24, 0x01	; 1
  82:	8b bb       	out	0x1b, r24	; 27
	// Si el switch da VCC, deshabilita el pull-up: PORTA &= ~(1 << PA0);

	DDRA &= ~(1 << DDA1);   // PA1 como ENTRADA
  84:	8a b3       	in	r24, 0x1a	; 26
  86:	8d 7f       	andi	r24, 0xFD	; 253
  88:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA1);    // Habilitar Pull-up interno en PA1 (si el switch va a GND)
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	8b bb       	out	0x1b, r24	; 27
	// Si el switch da VCC, deshabilita el pull-up: PORTA &= ~(1 << PA1);


	// --- CONFIGURACIÓN INICIAL DEL TIMER0 (Ej: 1kHz) ---
	TCNT0 = 0;          // Iniciar contador en 0
  90:	12 be       	out	0x32, r1	; 50
	OCR0 = 61;          // Valor para ~1kHz con N=64
  92:	8d e3       	ldi	r24, 0x3D	; 61
  94:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = (1 << WGM01) | // Modo CTC (WGM01=1, WGM00=0)
  96:	8b e1       	ldi	r24, 0x1B	; 27
  98:	83 bf       	out	0x33, r24	; 51
	(1 << CS00);

	// Habilitar interrupción de comparación (opcional, si la ISR hiciera algo útil)
	// TIMSK |= (1 << OCIE0);

	sei(); // Habilitar interrupciones globales (necesario si usas la ISR)
  9a:	78 94       	sei
}

int main(void)
{
	uint8_t selec; // Variable local para selección
	uint8_t selec_anterior = 0xFF; // Para detectar cambios, inicializar a un valor inválido
  9c:	9f ef       	ldi	r25, 0xFF	; 255
		// selec = 0 si PA1=H, PA0=H (ambos abiertos) -> 1kHz
		// selec = 1 si PA1=H, PA0=L (PA0 cerrado) -> 10kHz
		// selec = 2 si PA1=L, PA0=H (PA1 cerrado) -> 100kHz
		// selec = 3 si PA1=L, PA0=L (ambos cerrados) -> No definido en tu caso, tratar como 1kHz?
		selec = 0;
		if (!(PINA & (1 << PINA1))) { // Si PA1 está LOW (cerrado a GND)
  9e:	c9 9b       	sbis	0x19, 1	; 25
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <main+0x3a>
		// Opción 1: Switches a GND (activo bajo) con Pull-ups habilitados
		// selec = 0 si PA1=H, PA0=H (ambos abiertos) -> 1kHz
		// selec = 1 si PA1=H, PA0=L (PA0 cerrado) -> 10kHz
		// selec = 2 si PA1=L, PA0=H (PA1 cerrado) -> 100kHz
		// selec = 3 si PA1=L, PA0=L (ambos cerrados) -> No definido en tu caso, tratar como 1kHz?
		selec = 0;
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <main+0x3c>
		if (!(PINA & (1 << PINA1))) { // Si PA1 está LOW (cerrado a GND)
			selec += 2;
  a6:	82 e0       	ldi	r24, 0x02	; 2
		}
		if (!(PINA & (1 << PINA0))) { // Si PA0 está LOW (cerrado a GND)
  a8:	c8 9b       	sbis	0x19, 0	; 25
			selec += 1;
  aa:	8f 5f       	subi	r24, 0xFF	; 255

		// Opción 2: Switches dan VCC (activo alto), sin Pull-ups
		// selec = (PINA & ((1 << PINA1) | (1 << PINA0))); // Lee bits 1 y 0 directamente

		// --- Actualizar configuración del Timer SOLO SI la selección cambió ---
		if (selec != selec_anterior)
  ac:	89 17       	cp	r24, r25
  ae:	d9 f0       	breq	.+54     	; 0xe6 <main+0x7a>
		{
			switch(selec) {
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	49 f0       	breq	.+18     	; 0xc6 <main+0x5a>
  b4:	18 f0       	brcs	.+6      	; 0xbc <main+0x50>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	59 f0       	breq	.+22     	; 0xd0 <main+0x64>
  ba:	0f c0       	rjmp	.+30     	; 0xda <main+0x6e>
				case 0: // 1kHz (N=64, OCR0=61)
				TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (1 << CS01) | (1 << CS00);
  bc:	9b e1       	ldi	r25, 0x1B	; 27
  be:	93 bf       	out	0x33, r25	; 51
				OCR0 = 61;
  c0:	9d e3       	ldi	r25, 0x3D	; 61
  c2:	9c bf       	out	0x3c, r25	; 60
				break;
  c4:	0e c0       	rjmp	.+28     	; 0xe2 <main+0x76>

				case 1: // 10kHz (N=8, OCR0=49)
				TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (1 << CS01) | (0 << CS00);
  c6:	9a e1       	ldi	r25, 0x1A	; 26
  c8:	93 bf       	out	0x33, r25	; 51
				OCR0 = 49;
  ca:	91 e3       	ldi	r25, 0x31	; 49
  cc:	9c bf       	out	0x3c, r25	; 60
				break;
  ce:	09 c0       	rjmp	.+18     	; 0xe2 <main+0x76>

				case 2: // 100kHz (N=8, OCR0=4)
				TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (1 << CS01) | (0 << CS00);
  d0:	9a e1       	ldi	r25, 0x1A	; 26
  d2:	93 bf       	out	0x33, r25	; 51
				OCR0 = 4;
  d4:	94 e0       	ldi	r25, 0x04	; 4
  d6:	9c bf       	out	0x3c, r25	; 60
				break;
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <main+0x76>
				//    TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (1 << CS01) | (1 << CS00);
				//    OCR0 = 61;
				//    break;

				default: // Por seguridad, volver a un estado conocido si selec es inesperado
				TCCR0 = (1 << WGM01) | (1 << COM00) | (0 << CS02) | (1 << CS01) | (1 << CS00);
  da:	9b e1       	ldi	r25, 0x1B	; 27
  dc:	93 bf       	out	0x33, r25	; 51
				OCR0 = 61;
  de:	9d e3       	ldi	r25, 0x3D	; 61
  e0:	9c bf       	out	0x3c, r25	; 60
				break;
			}
			TCNT0 = 0; // Reiniciar el contador al cambiar de modo ayuda a sincronizar
  e2:	12 be       	out	0x32, r1	; 50
			selec_anterior = selec; // Guardar el estado actual para la próxima comparación
  e4:	98 2f       	mov	r25, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	ef e1       	ldi	r30, 0x1F	; 31
  e8:	fe e4       	ldi	r31, 0x4E	; 78
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x7e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x84>
  f0:	00 00       	nop
  f2:	d5 cf       	rjmp	.-86     	; 0x9e <main+0x32>

Disassembly of section .text.__dummy_fini:

00000126 <_fini>:
 126:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000128 <__funcs_on_exit>:
 128:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000012a <__simulator_exit>:
 12a:	08 95       	ret

Disassembly of section .text.exit:

000000f4 <exit>:
  f4:	ec 01       	movw	r28, r24
  f6:	0e 94 94 00 	call	0x128	; 0x128 <__funcs_on_exit>
  fa:	0e 94 93 00 	call	0x126	; 0x126 <_fini>
  fe:	ce 01       	movw	r24, r28
 100:	0e 94 95 00 	call	0x12a	; 0x12a <__simulator_exit>
 104:	ce 01       	movw	r24, r28
 106:	0e 94 91 00 	call	0x122	; 0x122 <_Exit>

Disassembly of section .text._Exit:

00000122 <_Exit>:
 122:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
