
MarchaImperial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003f2  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000421  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000043d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b20  00000000  00000000  0000047d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ba  00000000  00000000  00000f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e4  00000000  00000000  00001657  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  0000193c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001eb  00000000  00000000  00001b77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000370  00000370  000003e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.timer0_start_with_prescaler 00000006  0000036a  0000036a  000003de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.timer0_stop 00000008  00000362  00000362  000003d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.delay_ms_var 0000001c  00000330  00000330  000003a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.play_note_ocr_ms 0000006c  000002a6  000002a6  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    0000023a  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.libgcc.mul 0000001e  00000312  00000312  00000386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  00000378  00000378  000003ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  0000037a  0000037a  000003ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  0000037c  0000037c  000003f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  0000034c  0000034c  000003c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  00000374  00000374  000003e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
   8:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
   c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  10:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  14:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  18:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  1c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  20:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  24:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  28:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  2c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  30:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  34:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  38:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  3c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  40:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  44:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  48:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  4c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
  50:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 a6 01 	jmp	0x34c	; 0x34c <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000370 <__bad_interrupt>:
 370:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.timer0_start_with_prescaler:

0000036a <timer0_start_with_prescaler>:

/* Control del Timer0 (CTC + toggle OC0) */
static void timer0_start_with_prescaler(void)
{
    /* WGM01 = 1 (CTC), COM01=0 COM00=1 (toggle OC0) y prescaler */
    TCCR0 = (1 << WGM01) | (1 << COM00) | PRESCALER_BITS;
 36a:	8a e1       	ldi	r24, 0x1A	; 26
 36c:	83 bf       	out	0x33, r24	; 51
 36e:	08 95       	ret

Disassembly of section .text.timer0_stop:

00000362 <timer0_stop>:
}

static void timer0_stop(void)
{
    /* Detener Timer0: limpiar bits CS */
    TCCR0 &= (uint8_t)~((1 << CS02) | (1 << CS01) | (1 << CS00));
 362:	83 b7       	in	r24, 0x33	; 51
 364:	88 7f       	andi	r24, 0xF8	; 248
 366:	83 bf       	out	0x33, r24	; 51
 368:	08 95       	ret

Disassembly of section .text.delay_ms_var:

00000330 <delay_ms_var>:
}

/* helper: delay_ms variable usando _delay_ms(1) repetido */
static void delay_ms_var(uint16_t ms)
{
    while (ms--) {
 330:	07 c0       	rjmp	.+14     	; 0x340 <delay_ms_var+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	89 ef       	ldi	r24, 0xF9	; 249
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <delay_ms_var+0x6>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <delay_ms_var+0xc>
 33c:	00 00       	nop
 33e:	c9 01       	movw	r24, r18
 340:	9c 01       	movw	r18, r24
 342:	21 50       	subi	r18, 0x01	; 1
 344:	31 09       	sbc	r19, r1
 346:	89 2b       	or	r24, r25
 348:	a1 f7       	brne	.-24     	; 0x332 <delay_ms_var+0x2>
        _delay_ms(1); /* 1 es constante => compilador acepta */
    }
}
 34a:	08 95       	ret

Disassembly of section .text.play_note_ocr_ms:

000002a6 <play_note_ocr_ms>:

/* Reproduce una nota dada por su OCR (valor para OCR0) durante duration_ms.
   Usa 90% del tiempo para sonar y 10% como gap (staccato suave).
*/
static void play_note_ocr_ms(uint8_t ocr_value, uint16_t duration_ms)
{
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	eb 01       	movw	r28, r22
    if (ocr_value == 0xFFU || ocr_value == 0U) {
 2b0:	9f ef       	ldi	r25, 0xFF	; 255
 2b2:	98 0f       	add	r25, r24
 2b4:	9e 3f       	cpi	r25, 0xFE	; 254
 2b6:	30 f0       	brcs	.+12     	; 0x2c4 <play_note_ocr_ms+0x1e>
        /* silencio */
        timer0_stop();
 2b8:	0e 94 b1 01 	call	0x362	; 0x362 <timer0_stop>
        delay_ms_var(duration_ms);
 2bc:	ce 01       	movw	r24, r28
 2be:	0e 94 98 01 	call	0x330	; 0x330 <delay_ms_var>
        return;
 2c2:	22 c0       	rjmp	.+68     	; 0x308 <play_note_ocr_ms+0x62>
    }

    OCR0 = ocr_value;
 2c4:	8c bf       	out	0x3c, r24	; 60
    TCNT0 = 0;
 2c6:	12 be       	out	0x32, r1	; 50
    timer0_start_with_prescaler();
 2c8:	0e 94 b5 01 	call	0x36a	; 0x36a <timer0_start_with_prescaler>

    /* tocar nota durante el 90% del tiempo */
    uint16_t play_ms = (duration_ms * 9) / 10;
 2cc:	9e 01       	movw	r18, r28
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	2c 0f       	add	r18, r28
 2dc:	3d 1f       	adc	r19, r29
 2de:	ad ec       	ldi	r26, 0xCD	; 205
 2e0:	bc ec       	ldi	r27, 0xCC	; 204
 2e2:	0e 94 89 01 	call	0x312	; 0x312 <__umulhisi3>
 2e6:	8c 01       	movw	r16, r24
 2e8:	16 95       	lsr	r17
 2ea:	07 95       	ror	r16
 2ec:	16 95       	lsr	r17
 2ee:	07 95       	ror	r16
 2f0:	16 95       	lsr	r17
 2f2:	07 95       	ror	r16
    delay_ms_var(play_ms);
 2f4:	c8 01       	movw	r24, r16
 2f6:	0e 94 98 01 	call	0x330	; 0x330 <delay_ms_var>

    /* detener nota y gap breve */
    timer0_stop();
 2fa:	0e 94 b1 01 	call	0x362	; 0x362 <timer0_stop>
    delay_ms_var(duration_ms - play_ms);
 2fe:	ce 01       	movw	r24, r28
 300:	80 1b       	sub	r24, r16
 302:	91 0b       	sbc	r25, r17
 304:	0e 94 98 01 	call	0x330	; 0x330 <delay_ms_var>
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:
  que aparece en tu partitura/tab. Si quieres que añada más compases o
  ajustes (ligados, puntillos, silencios exactos), lo hago.
*/

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	c1 58       	subi	r28, 0x81	; 129
  76:	d1 09       	sbc	r29, r1
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	f8 94       	cli
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	0f be       	out	0x3f, r0	; 63
  80:	cd bf       	out	0x3d, r28	; 61
    /* configurar salida OC0 = PB3 */
    DDRB |= (1 << PB3);
  82:	87 b3       	in	r24, 0x17	; 23
  84:	88 60       	ori	r24, 0x08	; 8
  86:	87 bb       	out	0x17, r24	; 23
    PORTB &= ~(1 << PB3);
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	87 7f       	andi	r24, 0xF7	; 247
  8c:	88 bb       	out	0x18, r24	; 24

    /* inicializar timer detenido y OCR a 0 */
    OCR0 = 0;
  8e:	1c be       	out	0x3c, r1	; 60
    timer0_stop();
  90:	0e 94 b1 01 	call	0x362	; 0x362 <timer0_stop>

    /* Melodía (compases iniciales, transcripción aproximada con OCR existentes).
       Duraciones aproximadas tomadas como negras y corcheas según la partitura.
       Puedes pedirme ajustar cada compás si quieres la transcripción nota por nota exacta.
    */
    const Note melody[] = {
  94:	2e e9       	ldi	r18, 0x9E	; 158
  96:	29 83       	std	Y+1, r18	; 0x01
  98:	8a e9       	ldi	r24, 0x9A	; 154
  9a:	92 e0       	ldi	r25, 0x02	; 2
  9c:	9b 83       	std	Y+3, r25	; 0x03
  9e:	8a 83       	std	Y+2, r24	; 0x02
  a0:	2c 83       	std	Y+4, r18	; 0x04
  a2:	9e 83       	std	Y+6, r25	; 0x06
  a4:	8d 83       	std	Y+5, r24	; 0x05
  a6:	2f 83       	std	Y+7, r18	; 0x07
  a8:	99 87       	std	Y+9, r25	; 0x09
  aa:	88 87       	std	Y+8, r24	; 0x08
  ac:	48 ec       	ldi	r20, 0xC8	; 200
  ae:	4a 87       	std	Y+10, r20	; 0x0a
  b0:	9c 87       	std	Y+12, r25	; 0x0c
  b2:	8b 87       	std	Y+11, r24	; 0x0b
  b4:	36 e7       	ldi	r19, 0x76	; 118
  b6:	3d 87       	std	Y+13, r19	; 0x0d
  b8:	9f 87       	std	Y+15, r25	; 0x0f
  ba:	8e 87       	std	Y+14, r24	; 0x0e
  bc:	28 8b       	std	Y+16, r18	; 0x10
  be:	9a 8b       	std	Y+18, r25	; 0x12
  c0:	89 8b       	std	Y+17, r24	; 0x11
  c2:	4b 8b       	std	Y+19, r20	; 0x13
  c4:	9d 8b       	std	Y+21, r25	; 0x15
  c6:	8c 8b       	std	Y+20, r24	; 0x14
  c8:	3e 8b       	std	Y+22, r19	; 0x16
  ca:	98 8f       	std	Y+24, r25	; 0x18
  cc:	8f 8b       	std	Y+23, r24	; 0x17
  ce:	29 8f       	std	Y+25, r18	; 0x19
  d0:	9b 8f       	std	Y+27, r25	; 0x1b
  d2:	8a 8f       	std	Y+26, r24	; 0x1a
  d4:	65 e9       	ldi	r22, 0x95	; 149
  d6:	6c 8f       	std	Y+28, r22	; 0x1c
  d8:	9e 8f       	std	Y+30, r25	; 0x1e
  da:	8d 8f       	std	Y+29, r24	; 0x1d
  dc:	6f 8f       	std	Y+31, r22	; 0x1f
  de:	99 a3       	std	Y+33, r25	; 0x21
  e0:	88 a3       	std	Y+32, r24	; 0x20
  e2:	fd e7       	ldi	r31, 0x7D	; 125
  e4:	fa a3       	std	Y+34, r31	; 0x22
  e6:	9c a3       	std	Y+36, r25	; 0x24
  e8:	8b a3       	std	Y+35, r24	; 0x23
  ea:	e5 e8       	ldi	r30, 0x85	; 133
  ec:	ed a3       	std	Y+37, r30	; 0x25
  ee:	9f a3       	std	Y+39, r25	; 0x27
  f0:	8e a3       	std	Y+38, r24	; 0x26
  f2:	53 e5       	ldi	r21, 0x53	; 83
  f4:	58 a7       	std	Y+40, r21	; 0x28
  f6:	9a a7       	std	Y+42, r25	; 0x2a
  f8:	89 a7       	std	Y+41, r24	; 0x29
  fa:	2b a7       	std	Y+43, r18	; 0x2b
  fc:	9d a7       	std	Y+45, r25	; 0x2d
  fe:	8c a7       	std	Y+44, r24	; 0x2c
 100:	2e a7       	std	Y+46, r18	; 0x2e
 102:	98 ab       	std	Y+48, r25	; 0x30
 104:	8f a7       	std	Y+47, r24	; 0x2f
 106:	29 ab       	std	Y+49, r18	; 0x31
 108:	9b ab       	std	Y+51, r25	; 0x33
 10a:	8a ab       	std	Y+50, r24	; 0x32
 10c:	2c ab       	std	Y+52, r18	; 0x34
 10e:	9e ab       	std	Y+54, r25	; 0x36
 110:	8d ab       	std	Y+53, r24	; 0x35
 112:	2f ab       	std	Y+55, r18	; 0x37
 114:	99 af       	std	Y+57, r25	; 0x39
 116:	88 af       	std	Y+56, r24	; 0x38
 118:	4a af       	std	Y+58, r20	; 0x3a
 11a:	9c af       	std	Y+60, r25	; 0x3c
 11c:	8b af       	std	Y+59, r24	; 0x3b
 11e:	3d af       	std	Y+61, r19	; 0x3d
 120:	9f af       	std	Y+63, r25	; 0x3f
 122:	8e af       	std	Y+62, r24	; 0x3e
 124:	21 96       	adiw	r28, 0x01	; 1
 126:	2f af       	std	Y+63, r18	; 0x3f
 128:	21 97       	sbiw	r28, 0x01	; 1
 12a:	23 96       	adiw	r28, 0x03	; 3
 12c:	9f af       	std	Y+63, r25	; 0x3f
 12e:	8e af       	std	Y+62, r24	; 0x3e
 130:	23 97       	sbiw	r28, 0x03	; 3
 132:	24 96       	adiw	r28, 0x04	; 4
 134:	4f af       	std	Y+63, r20	; 0x3f
 136:	24 97       	sbiw	r28, 0x04	; 4
 138:	26 96       	adiw	r28, 0x06	; 6
 13a:	9f af       	std	Y+63, r25	; 0x3f
 13c:	8e af       	std	Y+62, r24	; 0x3e
 13e:	26 97       	sbiw	r28, 0x06	; 6
 140:	27 96       	adiw	r28, 0x07	; 7
 142:	3f af       	std	Y+63, r19	; 0x3f
 144:	27 97       	sbiw	r28, 0x07	; 7
 146:	29 96       	adiw	r28, 0x09	; 9
 148:	9f af       	std	Y+63, r25	; 0x3f
 14a:	8e af       	std	Y+62, r24	; 0x3e
 14c:	29 97       	sbiw	r28, 0x09	; 9
 14e:	79 e6       	ldi	r23, 0x69	; 105
 150:	2a 96       	adiw	r28, 0x0a	; 10
 152:	7f af       	std	Y+63, r23	; 0x3f
 154:	2a 97       	sbiw	r28, 0x0a	; 10
 156:	4d e4       	ldi	r20, 0x4D	; 77
 158:	51 e0       	ldi	r21, 0x01	; 1
 15a:	2c 96       	adiw	r28, 0x0c	; 12
 15c:	5f af       	std	Y+63, r21	; 0x3f
 15e:	4e af       	std	Y+62, r20	; 0x3e
 160:	2c 97       	sbiw	r28, 0x0c	; 12
 162:	3d e5       	ldi	r19, 0x5D	; 93
 164:	2d 96       	adiw	r28, 0x0d	; 13
 166:	3f af       	std	Y+63, r19	; 0x3f
 168:	2d 97       	sbiw	r28, 0x0d	; 13
 16a:	2f 96       	adiw	r28, 0x0f	; 15
 16c:	5f af       	std	Y+63, r21	; 0x3f
 16e:	4e af       	std	Y+62, r20	; 0x3e
 170:	2f 97       	sbiw	r28, 0x0f	; 15
 172:	60 96       	adiw	r28, 0x10	; 16
 174:	7f af       	std	Y+63, r23	; 0x3f
 176:	60 97       	sbiw	r28, 0x10	; 16
 178:	62 96       	adiw	r28, 0x12	; 18
 17a:	5f af       	std	Y+63, r21	; 0x3f
 17c:	4e af       	std	Y+62, r20	; 0x3e
 17e:	62 97       	sbiw	r28, 0x12	; 18
 180:	63 96       	adiw	r28, 0x13	; 19
 182:	3f af       	std	Y+63, r19	; 0x3f
 184:	63 97       	sbiw	r28, 0x13	; 19
 186:	65 96       	adiw	r28, 0x15	; 21
 188:	5f af       	std	Y+63, r21	; 0x3f
 18a:	4e af       	std	Y+62, r20	; 0x3e
 18c:	65 97       	sbiw	r28, 0x15	; 21
 18e:	66 96       	adiw	r28, 0x16	; 22
 190:	7f af       	std	Y+63, r23	; 0x3f
 192:	66 97       	sbiw	r28, 0x16	; 22
 194:	68 96       	adiw	r28, 0x18	; 24
 196:	9f af       	std	Y+63, r25	; 0x3f
 198:	8e af       	std	Y+62, r24	; 0x3e
 19a:	68 97       	sbiw	r28, 0x18	; 24
 19c:	69 96       	adiw	r28, 0x19	; 25
 19e:	3f af       	std	Y+63, r19	; 0x3f
 1a0:	69 97       	sbiw	r28, 0x19	; 25
 1a2:	6b 96       	adiw	r28, 0x1b	; 27
 1a4:	9f af       	std	Y+63, r25	; 0x3f
 1a6:	8e af       	std	Y+62, r24	; 0x3e
 1a8:	6b 97       	sbiw	r28, 0x1b	; 27
 1aa:	6c 96       	adiw	r28, 0x1c	; 28
 1ac:	2f af       	std	Y+63, r18	; 0x3f
 1ae:	6c 97       	sbiw	r28, 0x1c	; 28
 1b0:	6e 96       	adiw	r28, 0x1e	; 30
 1b2:	9f af       	std	Y+63, r25	; 0x3f
 1b4:	8e af       	std	Y+62, r24	; 0x3e
 1b6:	6e 97       	sbiw	r28, 0x1e	; 30
 1b8:	6f 96       	adiw	r28, 0x1f	; 31
 1ba:	6f af       	std	Y+63, r22	; 0x3f
 1bc:	6f 97       	sbiw	r28, 0x1f	; 31
 1be:	a1 96       	adiw	r28, 0x21	; 33
 1c0:	9f af       	std	Y+63, r25	; 0x3f
 1c2:	8e af       	std	Y+62, r24	; 0x3e
 1c4:	a1 97       	sbiw	r28, 0x21	; 33
 1c6:	a2 96       	adiw	r28, 0x22	; 34
 1c8:	ff af       	std	Y+63, r31	; 0x3f
 1ca:	a2 97       	sbiw	r28, 0x22	; 34
 1cc:	a4 96       	adiw	r28, 0x24	; 36
 1ce:	9f af       	std	Y+63, r25	; 0x3f
 1d0:	8e af       	std	Y+62, r24	; 0x3e
 1d2:	a4 97       	sbiw	r28, 0x24	; 36
 1d4:	a5 96       	adiw	r28, 0x25	; 37
 1d6:	2f af       	std	Y+63, r18	; 0x3f
 1d8:	a5 97       	sbiw	r28, 0x25	; 37
 1da:	a7 96       	adiw	r28, 0x27	; 39
 1dc:	9f af       	std	Y+63, r25	; 0x3f
 1de:	8e af       	std	Y+62, r24	; 0x3e
 1e0:	a7 97       	sbiw	r28, 0x27	; 39
 1e2:	a8 96       	adiw	r28, 0x28	; 40
 1e4:	ef af       	std	Y+63, r30	; 0x3f
 1e6:	a8 97       	sbiw	r28, 0x28	; 40
 1e8:	aa 96       	adiw	r28, 0x2a	; 42
 1ea:	9f af       	std	Y+63, r25	; 0x3f
 1ec:	8e af       	std	Y+62, r24	; 0x3e
 1ee:	aa 97       	sbiw	r28, 0x2a	; 42
 1f0:	37 ea       	ldi	r19, 0xA7	; 167
 1f2:	ab 96       	adiw	r28, 0x2b	; 43
 1f4:	3f af       	std	Y+63, r19	; 0x3f
 1f6:	ab 97       	sbiw	r28, 0x2b	; 43
 1f8:	ad 96       	adiw	r28, 0x2d	; 45
 1fa:	9f af       	std	Y+63, r25	; 0x3f
 1fc:	8e af       	std	Y+62, r24	; 0x3e
 1fe:	ad 97       	sbiw	r28, 0x2d	; 45
 200:	ae 96       	adiw	r28, 0x2e	; 46
 202:	2f af       	std	Y+63, r18	; 0x3f
 204:	ae 97       	sbiw	r28, 0x2e	; 46
 206:	e0 96       	adiw	r28, 0x30	; 48
 208:	9f af       	std	Y+63, r25	; 0x3f
 20a:	8e af       	std	Y+62, r24	; 0x3e
 20c:	e0 97       	sbiw	r28, 0x30	; 48
 20e:	3c eb       	ldi	r19, 0xBC	; 188
 210:	e1 96       	adiw	r28, 0x31	; 49
 212:	3f af       	std	Y+63, r19	; 0x3f
 214:	e1 97       	sbiw	r28, 0x31	; 49
 216:	e3 96       	adiw	r28, 0x33	; 51
 218:	9f af       	std	Y+63, r25	; 0x3f
 21a:	8e af       	std	Y+62, r24	; 0x3e
 21c:	e3 97       	sbiw	r28, 0x33	; 51
 21e:	e4 96       	adiw	r28, 0x34	; 52
 220:	2f af       	std	Y+63, r18	; 0x3f
 222:	e4 97       	sbiw	r28, 0x34	; 52
 224:	e6 96       	adiw	r28, 0x36	; 54
 226:	9f af       	std	Y+63, r25	; 0x3f
 228:	8e af       	std	Y+62, r24	; 0x3e
 22a:	e6 97       	sbiw	r28, 0x36	; 54
 22c:	e7 96       	adiw	r28, 0x37	; 55
 22e:	2f af       	std	Y+63, r18	; 0x3f
 230:	e7 97       	sbiw	r28, 0x37	; 55
 232:	e9 96       	adiw	r28, 0x39	; 57
 234:	9f af       	std	Y+63, r25	; 0x3f
 236:	8e af       	std	Y+62, r24	; 0x3e
 238:	e9 97       	sbiw	r28, 0x39	; 57
 23a:	ea 96       	adiw	r28, 0x3a	; 58
 23c:	2f af       	std	Y+63, r18	; 0x3f
 23e:	ea 97       	sbiw	r28, 0x3a	; 58
 240:	ec 96       	adiw	r28, 0x3c	; 60
 242:	9f af       	std	Y+63, r25	; 0x3f
 244:	8e af       	std	Y+62, r24	; 0x3e
 246:	ec 97       	sbiw	r28, 0x3c	; 60
 248:	ed 96       	adiw	r28, 0x3d	; 61
 24a:	3f af       	std	Y+63, r19	; 0x3f
 24c:	ed 97       	sbiw	r28, 0x3d	; 61
 24e:	ef 96       	adiw	r28, 0x3f	; 63
 250:	9f af       	std	Y+63, r25	; 0x3f
 252:	8e af       	std	Y+62, r24	; 0x3e
 254:	ef 97       	sbiw	r28, 0x3f	; 63
 256:	c1 58       	subi	r28, 0x81	; 129
 258:	df 4f       	sbci	r29, 0xFF	; 255
 25a:	18 82       	st	Y, r1
 25c:	cf 57       	subi	r28, 0x7F	; 127
 25e:	d0 40       	sbci	r29, 0x00	; 0
 260:	c0 58       	subi	r28, 0x80	; 128
 262:	df 4f       	sbci	r29, 0xFF	; 255
 264:	99 83       	std	Y+1, r25	; 0x01
 266:	88 83       	st	Y, r24
 268:	c0 58       	subi	r28, 0x80	; 128
 26a:	d0 40       	sbci	r29, 0x00	; 0

    const uint16_t melody_len = sizeof(melody) / sizeof(melody[0]);

    /* Reproducir en bucle */
    while (1) {
        for (uint16_t i = 0; i < melody_len; ++i) {
 26c:	00 e0       	ldi	r16, 0x00	; 0
 26e:	10 e0       	ldi	r17, 0x00	; 0
 270:	12 c0       	rjmp	.+36     	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
            play_note_ocr_ms(melody[i].ocr, melody[i].length_ms);
 272:	f8 01       	movw	r30, r16
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	e0 0f       	add	r30, r16
 27a:	f1 1f       	adc	r31, r17
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	8c 0f       	add	r24, r28
 282:	9d 1f       	adc	r25, r29
 284:	e8 0f       	add	r30, r24
 286:	f9 1f       	adc	r31, r25
 288:	61 81       	ldd	r22, Z+1	; 0x01
 28a:	72 81       	ldd	r23, Z+2	; 0x02
 28c:	80 81       	ld	r24, Z
 28e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <play_note_ocr_ms>

    const uint16_t melody_len = sizeof(melody) / sizeof(melody[0]);

    /* Reproducir en bucle */
    while (1) {
        for (uint16_t i = 0; i < melody_len; ++i) {
 292:	0f 5f       	subi	r16, 0xFF	; 255
 294:	1f 4f       	sbci	r17, 0xFF	; 255
 296:	0b 32       	cpi	r16, 0x2B	; 43
 298:	11 05       	cpc	r17, r1
 29a:	58 f3       	brcs	.-42     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
            play_note_ocr_ms(melody[i].ocr, melody[i].length_ms);
        }
        /* pequeño descanso entre repeticiones */
        delay_ms_var(500);
 29c:	84 ef       	ldi	r24, 0xF4	; 244
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 98 01 	call	0x330	; 0x330 <delay_ms_var>
    }
 2a4:	e3 cf       	rjmp	.-58     	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>

Disassembly of section .text.libgcc.mul:

00000312 <__umulhisi3>:
 312:	a2 9f       	mul	r26, r18
 314:	b0 01       	movw	r22, r0
 316:	b3 9f       	mul	r27, r19
 318:	c0 01       	movw	r24, r0
 31a:	a3 9f       	mul	r26, r19
 31c:	70 0d       	add	r23, r0
 31e:	81 1d       	adc	r24, r1
 320:	11 24       	eor	r1, r1
 322:	91 1d       	adc	r25, r1
 324:	b2 9f       	mul	r27, r18
 326:	70 0d       	add	r23, r0
 328:	81 1d       	adc	r24, r1
 32a:	11 24       	eor	r1, r1
 32c:	91 1d       	adc	r25, r1
 32e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000378 <_fini>:
 378:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000037a <__funcs_on_exit>:
 37a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000037c <__simulator_exit>:
 37c:	08 95       	ret

Disassembly of section .text.exit:

0000034c <exit>:
 34c:	ec 01       	movw	r28, r24
 34e:	0e 94 bd 01 	call	0x37a	; 0x37a <__funcs_on_exit>
 352:	0e 94 bc 01 	call	0x378	; 0x378 <_fini>
 356:	ce 01       	movw	r24, r28
 358:	0e 94 be 01 	call	0x37c	; 0x37c <__simulator_exit>
 35c:	ce 01       	movw	r24, r28
 35e:	0e 94 ba 01 	call	0x374	; 0x374 <_Exit>

Disassembly of section .text._Exit:

00000374 <_Exit>:
 374:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
