
Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018e  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001bd  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000822  00000000  00000000  000001f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000562  00000000  00000000  00000a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001df  00000000  00000000  00000f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  0000134f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000010c  0000010c  00000180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_9 00000028  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000026  000000d0  000000d0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  00000114  00000114  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  00000116  00000116  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  00000118  00000118  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000000f6  000000f6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  00000110  00000110  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_etext>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  a0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_9:

000000a8 <__vector_9>:
volatile uint16_t seconds = 0U;
volatile uint16_t mins = 0U;
volatile uint16_t hours = 0U;


ISR (TIMER0_OVF_vect){
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	
	PORTB ^= (1 << PB5);																//TOGGLE EN PB5
  b6:	98 b3       	in	r25, 0x18	; 24
  b8:	80 e2       	ldi	r24, 0x20	; 32
  ba:	89 27       	eor	r24, r25
  bc:	88 bb       	out	0x18, r24	; 24
	TCNT0 = 177;																		//CARGAMOS DE NUEVO EL TIMER0
  be:	81 eb       	ldi	r24, 0xB1	; 177
  c0:	82 bf       	out	0x32, r24	; 50
	
}
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

Disassembly of section .text.main:

000000d0 <main>:

int main(void)
{
	
	
	DDRB  |= (1 << PB5);																//CONFIGURAMOS PB5 COMO SALIDA
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB5);																//APAGAMOS PB5				
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8f 7d       	andi	r24, 0xDF	; 223
  da:	88 bb       	out	0x18, r24	; 24
	//CONFIGURAMOS EL TIMER EN MODO TEMPORIZADOR
	TCNT0 = 177;																		//PRECARGAMOS EL REGISTRO
  dc:	81 eb       	ldi	r24, 0xB1	; 177
  de:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1 <<  TOV0);																//LIMPIAMOS BANDERA	
  e0:	88 b7       	in	r24, 0x38	; 56
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	88 bf       	out	0x38, r24	; 56
	TIMSK |= (1 << TOIE0);																//HABILITA INTERRUPCION POR TIMER0
  e6:	89 b7       	in	r24, 0x39	; 57
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (CS02 << 1)|(CS01 << 0)|(CS00 << 1);													//PRESCALER 1024
  ec:	83 b7       	in	r24, 0x33	; 51
  ee:	85 60       	ori	r24, 0x05	; 5
  f0:	83 bf       	out	0x33, r24	; 51
	sei();																				//HABILITA INTERRUPCIONES GLOBALES				
  f2:	78 94       	sei
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <main+0x24>

Disassembly of section .text.__dummy_fini:

00000114 <_fini>:
 114:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000116 <__funcs_on_exit>:
 116:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000118 <__simulator_exit>:
 118:	08 95       	ret

Disassembly of section .text.exit:

000000f6 <exit>:
  f6:	ec 01       	movw	r28, r24
  f8:	0e 94 8b 00 	call	0x116	; 0x116 <__funcs_on_exit>
  fc:	0e 94 8a 00 	call	0x114	; 0x114 <_fini>
 100:	ce 01       	movw	r24, r28
 102:	0e 94 8c 00 	call	0x118	; 0x118 <__simulator_exit>
 106:	ce 01       	movw	r24, r28
 108:	0e 94 88 00 	call	0x110	; 0x110 <_Exit>

Disassembly of section .text._Exit:

00000110 <_Exit>:
 110:	0e 94 52 00 	call	0xa4	; 0xa4 <_exit>
