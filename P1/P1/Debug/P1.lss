
P1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c0  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001ef  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093d  00000000  00000000  0000021d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e1  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000285  00000000  00000000  0000113b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010a  00000000  00000000  00001593  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000169d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000013e  0000013e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000080  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  00000146  00000146  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  00000148  00000148  000001bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  00000128  00000128  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  00000142  00000142  000001b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

0000013e <__bad_interrupt>:
 13e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000a8 <main>:


int main(void)
{
	
	DDRA = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  ac:	87 bb       	out	0x17, r24	; 23
    while(1)
    {
        
		//AVANZAMOS PORTB DE 0 A 7  
		
		for(uint8_t i = 0; i<8; i++ )
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	11 c0       	rjmp	.+34     	; 0xd4 <main+0x2c>
		{
			PORTA = 0x00;
  b2:	1b ba       	out	0x1b, r1	; 27
			PORTB = (1<<i);
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	08 2e       	mov	r0, r24
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x18>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <main+0x14>
  c4:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	ef e1       	ldi	r30, 0x1F	; 31
  c8:	fe e4       	ldi	r31, 0x4E	; 78
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x22>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x28>
  d0:	00 00       	nop
    while(1)
    {
        
		//AVANZAMOS PORTB DE 0 A 7  
		
		for(uint8_t i = 0; i<8; i++ )
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	68 f3       	brcs	.-38     	; 0xb2 <main+0xa>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	11 c0       	rjmp	.+34     	; 0xfe <main+0x56>
		}
		
		//AVANZAMOS PORTA DE 0 A 7
		for(uint8_t i =0; i<8; i++)
		{
			PORTA = (1<<i);
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	08 2e       	mov	r0, r24
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <main+0x40>
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <main+0x3c>
  ec:	2b bb       	out	0x1b, r18	; 27
			PORTB = 0x00;
  ee:	18 ba       	out	0x18, r1	; 24
  f0:	ef e1       	ldi	r30, 0x1F	; 31
  f2:	fe e4       	ldi	r31, 0x4E	; 78
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x4c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x52>
  fa:	00 00       	nop
			PORTB = (1<<i);
			_delay_ms(80);
		}
		
		//AVANZAMOS PORTA DE 0 A 7
		for(uint8_t i =0; i<8; i++)
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	88 30       	cpi	r24, 0x08	; 8
 100:	68 f3       	brcs	.-38     	; 0xdc <main+0x34>
 102:	26 e0       	ldi	r18, 0x06	; 6
		
		//REGRESAMOS DE PORTA 
		
		for(uint8_t	i=6; i>=0; i--)
		{
			PORTA = (1<<i);
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 2e       	mov	r0, r18
 10a:	02 c0       	rjmp	.+4      	; 0x110 <main+0x68>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <main+0x64>
 114:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x00;
 116:	18 ba       	out	0x18, r1	; 24
 118:	8f e1       	ldi	r24, 0x1F	; 31
 11a:	9e e4       	ldi	r25, 0x4E	; 78
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x74>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x7a>
 122:	00 00       	nop
			_delay_ms(80);
		} 
		
		//REGRESAMOS DE PORTA 
		
		for(uint8_t	i=6; i>=0; i--)
 124:	21 50       	subi	r18, 0x01	; 1
 126:	ee cf       	rjmp	.-36     	; 0x104 <main+0x5c>

Disassembly of section .text.__dummy_fini:

00000146 <_fini>:
 146:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000148 <__funcs_on_exit>:
 148:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000014a <__simulator_exit>:
 14a:	08 95       	ret

Disassembly of section .text.exit:

00000128 <exit>:
 128:	ec 01       	movw	r28, r24
 12a:	0e 94 a4 00 	call	0x148	; 0x148 <__funcs_on_exit>
 12e:	0e 94 a3 00 	call	0x146	; 0x146 <_fini>
 132:	ce 01       	movw	r24, r28
 134:	0e 94 a5 00 	call	0x14a	; 0x14a <__simulator_exit>
 138:	ce 01       	movw	r24, r28
 13a:	0e 94 a1 00 	call	0x142	; 0x142 <_Exit>

Disassembly of section .text._Exit:

00000142 <_Exit>:
 142:	0e 94 52 00 	call	0xa4	; 0xa4 <_exit>
