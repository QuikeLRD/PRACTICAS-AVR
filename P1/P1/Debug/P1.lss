
P1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000298  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000298  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000002c7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000933  00000000  00000000  000002f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c9  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dc  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000014d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  000016a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000017c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000001f6  000001f6  0000028a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    00000132  000000ae  000000ae  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  000001fe  000001fe  00000292  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  00000200  00000200  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  00000202  00000202  00000296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000001e0  000001e0  00000274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000001fa  000001fa  0000028e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
   8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
   c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 62       	ori	r16, 0x20	; 32
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d4 e0       	ldi	r29, 0x04	; 4
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 57 00 	call	0xae	; 0xae <_etext>
  a6:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

000001f6 <__bad_interrupt>:
 1f6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000ae <main>:


int main(void)
{
	
	DDRA = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  b2:	87 bb       	out	0x17, r24	; 23
    while(1)
    {
        
		//AVANZAMOS PORTB DE 0 A 7  
		
		for(i = 0; i<8; i++ )
  b4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  bc:	1a c0       	rjmp	.+52     	; 0xf2 <main+0x44>
		{
			PORTA = 0x00;
  be:	1b ba       	out	0x1b, r1	; 27
			PORTB = (1<<i);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	00 90 60 00 	lds	r0, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x20>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <main+0x1c>
  d2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e1       	ldi	r24, 0x1F	; 31
  d6:	9e e4       	ldi	r25, 0x4E	; 78
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x2a>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x30>
  de:	00 00       	nop
    while(1)
    {
        
		//AVANZAMOS PORTB DE 0 A 7  
		
		for(i = 0; i<8; i++ )
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  fa:	08 97       	sbiw	r24, 0x08	; 8
  fc:	04 f3       	brlt	.-64     	; 0xbe <main+0x10>
			PORTB = (1<<i);
			_delay_ms(80);
		}
		
		//AVANZAMOS PORTA DE 0 A 7
		for(i =0; i<8; i++)
  fe:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 102:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 106:	18 c0       	rjmp	.+48     	; 0x138 <main+0x8a>
		{
			PORTA = (1<<i);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <main+0x64>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	2a 95       	dec	r18
 114:	e2 f7       	brpl	.-8      	; 0x10e <main+0x60>
 116:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x00;
 118:	18 ba       	out	0x18, r1	; 24
 11a:	8f e1       	ldi	r24, 0x1F	; 31
 11c:	9e e4       	ldi	r25, 0x4E	; 78
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x70>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x76>
 124:	00 00       	nop
			PORTB = (1<<i);
			_delay_ms(80);
		}
		
		//AVANZAMOS PORTA DE 0 A 7
		for(i =0; i<8; i++)
 126:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 134:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 138:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 140:	28 30       	cpi	r18, 0x08	; 8
 142:	31 05       	cpc	r19, r1
 144:	0c f3       	brlt	.-62     	; 0x108 <main+0x5a>
			_delay_ms(80);
		} 
		
		//REGRESAMOS DE PORTA 
		
		for(i=7; i>=0; i--)
 146:	87 e0       	ldi	r24, 0x07	; 7
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 152:	18 c0       	rjmp	.+48     	; 0x184 <main+0xd6>
		{
			PORTA = (1<<i);
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <main+0xb0>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	2a 95       	dec	r18
 160:	e2 f7       	brpl	.-8      	; 0x15a <main+0xac>
 162:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x00;
 164:	18 ba       	out	0x18, r1	; 24
 166:	8f e1       	ldi	r24, 0x1F	; 31
 168:	9e e4       	ldi	r25, 0x4E	; 78
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0xbc>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0xc2>
 170:	00 00       	nop
			_delay_ms(80);
		} 
		
		//REGRESAMOS DE PORTA 
		
		for(i=7; i>=0; i--)
 172:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 176:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 180:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 184:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 188:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 18c:	33 23       	and	r19, r19
 18e:	14 f7       	brge	.-60     	; 0x154 <main+0xa6>
		}
	
	
		//REGRESAMOS DE PORTB
		
		for(i=7; i>=0; i--)
 190:	87 e0       	ldi	r24, 0x07	; 7
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 198:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 19c:	1a c0       	rjmp	.+52     	; 0x1d2 <main+0x124>
		{
			PORTA = 0x00;
 19e:	1b ba       	out	0x1b, r1	; 27
			PORTB = (1<<i);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	00 90 60 00 	lds	r0, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <main+0x100>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <main+0xfc>
 1b2:	88 bb       	out	0x18, r24	; 24
 1b4:	8f e1       	ldi	r24, 0x1F	; 31
 1b6:	9e e4       	ldi	r25, 0x4E	; 78
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x10a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x110>
 1be:	00 00       	nop
		}
	
	
		//REGRESAMOS DE PORTB
		
		for(i=7; i>=0; i--)
 1c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1da:	99 23       	and	r25, r25
 1dc:	04 f7       	brge	.-64     	; 0x19e <main+0xf0>
 1de:	6a cf       	rjmp	.-300    	; 0xb4 <main+0x6>

Disassembly of section .text.__dummy_fini:

000001fe <_fini>:
 1fe:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000200 <__funcs_on_exit>:
 200:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000202 <__simulator_exit>:
 202:	08 95       	ret

Disassembly of section .text.exit:

000001e0 <exit>:
 1e0:	ec 01       	movw	r28, r24
 1e2:	0e 94 00 01 	call	0x200	; 0x200 <__EEPROM_REGION_LENGTH__>
 1e6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <_fini>
 1ea:	ce 01       	movw	r24, r28
 1ec:	0e 94 01 01 	call	0x202	; 0x202 <__simulator_exit>
 1f0:	ce 01       	movw	r24, r28
 1f2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Exit>

Disassembly of section .text._Exit:

000001fa <_Exit>:
 1fa:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
