
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000100  00000194  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001c3  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000889  00000000  00000000  000001f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c1  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000204  00000000  00000000  0000103b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000ee  000000ee  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000028  000000b0  000000b0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .data.y       00000002  00800060  000000fc  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 15 .data.j       00000002  00800062  000000fe  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 16 .text.__dummy_fini 00000002  000000f6  000000f6  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  000000f8  000000f8  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  000000fa  000000fa  0000018e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000000d8  000000d8  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000000f2  000000f2  00000186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 64       	ori	r16, 0x40	; 64
  58:	00 00       	nop
  5a:	fc 00       	.word	0x00fc	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <_etext>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000b0 <main>:


int main(void)
{
    
	DDRA = 0x00;
  b0:	1a ba       	out	0x1a, r1	; 26
	DDRB = 255;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
  b6:	84 bb       	out	0x14, r24	; 20
	
	
	while(1)
    {
      PORTB = j;
  b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <j>
  bc:	88 bb       	out	0x18, r24	; 24
	  PORTC = y;
  be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f e9       	ldi	r18, 0x9F	; 159
  c6:	86 e8       	ldi	r24, 0x86	; 134
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x1a>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x24>
  d4:	00 00       	nop
  d6:	f0 cf       	rjmp	.-32     	; 0xb8 <main+0x8>

Disassembly of section .text.__dummy_fini:

000000f6 <_fini>:
  f6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000f8 <__funcs_on_exit>:
  f8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000fa <__simulator_exit>:
  fa:	08 95       	ret

Disassembly of section .text.exit:

000000d8 <exit>:
  d8:	ec 01       	movw	r28, r24
  da:	0e 94 7c 00 	call	0xf8	; 0xf8 <__funcs_on_exit>
  de:	0e 94 7b 00 	call	0xf6	; 0xf6 <_fini>
  e2:	ce 01       	movw	r24, r28
  e4:	0e 94 7d 00 	call	0xfa	; 0xfa <__simulator_exit>
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 79 00 	call	0xf2	; 0xf2 <_Exit>

Disassembly of section .text._Exit:

000000f2 <_Exit>:
  f2:	0e 94 56 00 	call	0xac	; 0xac <_exit>
